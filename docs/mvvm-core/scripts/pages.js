var pages = [{"name":"val Dispatchers.UI: CoroutineDispatcher","description":"dev.icerock.moko.mvvm.UI","location":"mvvm-core/dev.icerock.moko.mvvm/-u-i.html","searchKeys":["UI","val Dispatchers.UI: CoroutineDispatcher"]},{"name":"class ViewModelFactory(viewModelBlock: () -> ViewModel) : ViewModelProvider.Factory","description":"dev.icerock.moko.mvvm.ViewModelFactory","location":"mvvm-core/dev.icerock.moko.mvvm/-view-model-factory/index.html","searchKeys":["ViewModelFactory","class ViewModelFactory(viewModelBlock: () -> ViewModel) : ViewModelProvider.Factory"]},{"name":"fun ViewModelFactory(viewModelBlock: () -> ViewModel)","description":"dev.icerock.moko.mvvm.ViewModelFactory.ViewModelFactory","location":"mvvm-core/dev.icerock.moko.mvvm/-view-model-factory/-view-model-factory.html","searchKeys":["ViewModelFactory","fun ViewModelFactory(viewModelBlock: () -> ViewModel)"]},{"name":"open override fun <T : ViewModel?> create(modelClass: Class<T>): T","description":"dev.icerock.moko.mvvm.ViewModelFactory.create","location":"mvvm-core/dev.icerock.moko.mvvm/-view-model-factory/create.html","searchKeys":["create","open override fun <T : ViewModel?> create(modelClass: Class<T>): T"]},{"name":"inline fun <T : ViewModel> ViewModelStoreOwner.createViewModelFactory(noinline viewModelBlock: () -> T): ViewModelFactory","description":"dev.icerock.moko.mvvm.createViewModelFactory","location":"mvvm-core/dev.icerock.moko.mvvm/create-view-model-factory.html","searchKeys":["createViewModelFactory","inline fun <T : ViewModel> ViewModelStoreOwner.createViewModelFactory(noinline viewModelBlock: () -> T): ViewModelFactory"]},{"name":"class EventsDispatcher<ListenerType : Any>","description":"dev.icerock.moko.mvvm.dispatcher.EventsDispatcher","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/-events-dispatcher/index.html","searchKeys":["EventsDispatcher","class EventsDispatcher<ListenerType : Any>"]},{"name":"fun dispatchEvent(block: ListenerType.() -> Unit)","description":"dev.icerock.moko.mvvm.dispatcher.EventsDispatcher.dispatchEvent","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/-events-dispatcher/dispatch-event.html","searchKeys":["dispatchEvent","fun dispatchEvent(block: ListenerType.() -> Unit)"]},{"name":"var listener: ListenerType?","description":"dev.icerock.moko.mvvm.dispatcher.EventsDispatcher.listener","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/-events-dispatcher/listener.html","searchKeys":["listener","var listener: ListenerType?"]},{"name":"interface EventsDispatcherOwner<T : Any>","description":"dev.icerock.moko.mvvm.dispatcher.EventsDispatcherOwner","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/-events-dispatcher-owner/index.html","searchKeys":["EventsDispatcherOwner","interface EventsDispatcherOwner<T : Any>"]},{"name":"abstract val eventsDispatcher: EventsDispatcher<T>","description":"dev.icerock.moko.mvvm.dispatcher.EventsDispatcherOwner.eventsDispatcher","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/-events-dispatcher-owner/events-dispatcher.html","searchKeys":["eventsDispatcher","abstract val eventsDispatcher: EventsDispatcher<T>"]},{"name":"fun createExecutorOnMainLooper(): Executor","description":"dev.icerock.moko.mvvm.dispatcher.createExecutorOnMainLooper","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/create-executor-on-main-looper.html","searchKeys":["createExecutorOnMainLooper","fun createExecutorOnMainLooper(): Executor"]},{"name":"inline fun <T : Any> eventsDispatcherOnMain(): EventsDispatcher<T>","description":"dev.icerock.moko.mvvm.dispatcher.eventsDispatcherOnMain","location":"mvvm-core/dev.icerock.moko.mvvm.dispatcher/events-dispatcher-on-main.html","searchKeys":["eventsDispatcherOnMain","inline fun <T : Any> eventsDispatcherOnMain(): EventsDispatcher<T>"]},{"name":"inline fun <T : ViewModel> ViewModelStoreOwner.getViewModel(noinline viewModelBlock: () -> T): T","description":"dev.icerock.moko.mvvm.getViewModel","location":"mvvm-core/dev.icerock.moko.mvvm/get-view-model.html","searchKeys":["getViewModel","inline fun <T : ViewModel> ViewModelStoreOwner.getViewModel(noinline viewModelBlock: () -> T): T"]},{"name":"open class ViewModel","description":"dev.icerock.moko.mvvm.viewmodel.ViewModel","location":"mvvm-core/dev.icerock.moko.mvvm.viewmodel/-view-model/index.html","searchKeys":["ViewModel","open class ViewModel"]},{"name":"fun ViewModel()","description":"dev.icerock.moko.mvvm.viewmodel.ViewModel.ViewModel","location":"mvvm-core/dev.icerock.moko.mvvm.viewmodel/-view-model/-view-model.html","searchKeys":["ViewModel","fun ViewModel()"]},{"name":"open fun onCleared()","description":"dev.icerock.moko.mvvm.viewmodel.ViewModel.onCleared","location":"mvvm-core/dev.icerock.moko.mvvm.viewmodel/-view-model/on-cleared.html","searchKeys":["onCleared","open fun onCleared()"]}]
