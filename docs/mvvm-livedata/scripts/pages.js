var pages = [{"name":"fun <ERROR CLASS>.bindEnabled(liveData: LiveData<Boolean>, enabledColor: <ERROR CLASS>? = null, disabledColor: <ERROR CLASS>? = null)","description":"dev.icerock.moko.mvvm.binding.bindEnabled","location":"mvvm-livedata/dev.icerock.moko.mvvm.binding/bind-enabled.html","searchKeys":["bindEnabled","fun <ERROR CLASS>.bindEnabled(liveData: LiveData<Boolean>, enabledColor: <ERROR CLASS>? = null, disabledColor: <ERROR CLASS>? = null)"]},{"name":"fun <ERROR CLASS>.bindImages(liveData: LiveData<Boolean>, trueImage: <ERROR CLASS>, falseImage: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.binding.bindImages","location":"mvvm-livedata/dev.icerock.moko.mvvm.binding/bind-images.html","searchKeys":["bindImages","fun <ERROR CLASS>.bindImages(liveData: LiveData<Boolean>, trueImage: <ERROR CLASS>, falseImage: <ERROR CLASS>)"]},{"name":"fun <ERROR CLASS>.bindValue(liveData: LiveData<Boolean>)","description":"dev.icerock.moko.mvvm.binding.bindValue","location":"mvvm-livedata/dev.icerock.moko.mvvm.binding/bind-value.html","searchKeys":["bindValue","fun <ERROR CLASS>.bindValue(liveData: LiveData<Boolean>)"]},{"name":"fun <ERROR CLASS>.bindValueTwoWay(liveData: MutableLiveData<Boolean>)","description":"dev.icerock.moko.mvvm.binding.bindValueTwoWay","location":"mvvm-livedata/dev.icerock.moko.mvvm.binding/bind-value-two-way.html","searchKeys":["bindValueTwoWay","fun <ERROR CLASS>.bindValueTwoWay(liveData: MutableLiveData<Boolean>)"]},{"name":"fun <ERROR CLASS>.bindVisibility(liveData: LiveData<Boolean>, inverted: Boolean = false)","description":"dev.icerock.moko.mvvm.binding.bindVisibility","location":"mvvm-livedata/dev.icerock.moko.mvvm.binding/bind-visibility.html","searchKeys":["bindVisibility","fun <ERROR CLASS>.bindVisibility(liveData: LiveData<Boolean>, inverted: Boolean = false)"]},{"name":"open class LiveData<T>","description":"dev.icerock.moko.mvvm.livedata.LiveData","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-live-data/index.html","searchKeys":["LiveData","open class LiveData<T>"]},{"name":"fun <T> LiveData(initialValue: T)","description":"dev.icerock.moko.mvvm.livedata.LiveData.LiveData","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-live-data/-live-data.html","searchKeys":["LiveData","fun <T> LiveData(initialValue: T)"]},{"name":"fun addObserver(observer: (T) -> Unit)","description":"dev.icerock.moko.mvvm.livedata.LiveData.addObserver","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-live-data/add-observer.html","searchKeys":["addObserver","fun addObserver(observer: (T) -> Unit)"]},{"name":"fun removeObserver(observer: (T) -> Unit)","description":"dev.icerock.moko.mvvm.livedata.LiveData.removeObserver","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-live-data/remove-observer.html","searchKeys":["removeObserver","fun removeObserver(observer: (T) -> Unit)"]},{"name":"open val value: T","description":"dev.icerock.moko.mvvm.livedata.LiveData.value","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-live-data/value.html","searchKeys":["value","open val value: T"]},{"name":"open override var value: T","description":"dev.icerock.moko.mvvm.livedata.MutableLiveData.value","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mutable-live-data/value.html","searchKeys":["value","open override var value: T"]},{"name":"open class MediatorLiveData<T>(initialValue: T) : MutableLiveData<T> ","description":"dev.icerock.moko.mvvm.livedata.MediatorLiveData","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mediator-live-data/index.html","searchKeys":["MediatorLiveData","open class MediatorLiveData<T>(initialValue: T) : MutableLiveData<T> "]},{"name":"fun <T> MediatorLiveData(initialValue: T)","description":"dev.icerock.moko.mvvm.livedata.MediatorLiveData.MediatorLiveData","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mediator-live-data/-mediator-live-data.html","searchKeys":["MediatorLiveData","fun <T> MediatorLiveData(initialValue: T)"]},{"name":"fun <IT> addSource(liveData: LiveData<IT>, onChange: (IT) -> Unit)","description":"dev.icerock.moko.mvvm.livedata.MediatorLiveData.addSource","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mediator-live-data/add-source.html","searchKeys":["addSource","fun <IT> addSource(liveData: LiveData<IT>, onChange: (IT) -> Unit)"]},{"name":"open class MutableLiveData<T>(initialValue: T) : LiveData<T> ","description":"dev.icerock.moko.mvvm.livedata.MutableLiveData","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mutable-live-data/index.html","searchKeys":["MutableLiveData","open class MutableLiveData<T>(initialValue: T) : LiveData<T> "]},{"name":"fun <T> MutableLiveData(initialValue: T)","description":"dev.icerock.moko.mvvm.livedata.MutableLiveData.MutableLiveData","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mutable-live-data/-mutable-live-data.html","searchKeys":["MutableLiveData","fun <T> MutableLiveData(initialValue: T)"]},{"name":"fun postValue(value: T)","description":"dev.icerock.moko.mvvm.livedata.MutableLiveData.postValue","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/-mutable-live-data/post-value.html","searchKeys":["postValue","fun postValue(value: T)"]},{"name":"fun <LD : LiveData<Boolean>> List<LD>.all(value: Boolean): LiveData<Boolean>","description":"dev.icerock.moko.mvvm.livedata.all","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/all.html","searchKeys":["all","fun <LD : LiveData<Boolean>> List<LD>.all(value: Boolean): LiveData<Boolean>"]},{"name":"fun <LD : LiveData<Boolean>> List<LD>.any(value: Boolean): LiveData<Boolean>","description":"dev.icerock.moko.mvvm.livedata.any","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/any.html","searchKeys":["any","fun <LD : LiveData<Boolean>> List<LD>.any(value: Boolean): LiveData<Boolean>"]},{"name":"fun <T> LiveData<T>.asFlow(): Flow<T>","description":"dev.icerock.moko.mvvm.livedata.asFlow","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/as-flow.html","searchKeys":["asFlow","fun <T> LiveData<T>.asFlow(): Flow<T>"]},{"name":"fun LiveData<Boolean>.bindToButtonImage(button: <ERROR CLASS>, trueImage: <ERROR CLASS>, falseImage: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindToButtonImage","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-button-image.html","searchKeys":["bindToButtonImage","fun LiveData<Boolean>.bindToButtonImage(button: <ERROR CLASS>, trueImage: <ERROR CLASS>, falseImage: <ERROR CLASS>)"]},{"name":"fun LiveData<Boolean>.bindToCheckBoxChecked(lifecycleOwner: LifecycleOwner, checkBox: CheckBox)","description":"dev.icerock.moko.mvvm.livedata.bindToCheckBoxChecked","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-check-box-checked.html","searchKeys":["bindToCheckBoxChecked","fun LiveData<Boolean>.bindToCheckBoxChecked(lifecycleOwner: LifecycleOwner, checkBox: CheckBox)"]},{"name":"fun LiveData<Boolean>.bindToControlEnabled(control: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindToControlEnabled","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-control-enabled.html","searchKeys":["bindToControlEnabled","fun LiveData<Boolean>.bindToControlEnabled(control: <ERROR CLASS>)"]},{"name":"fun LiveData<Boolean>.bindToResponderFocus(responder: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindToResponderFocus","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-responder-focus.html","searchKeys":["bindToResponderFocus","fun LiveData<Boolean>.bindToResponderFocus(responder: <ERROR CLASS>)"]},{"name":"fun LiveData<Boolean>.bindToSwitchOn(switch: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindToSwitchOn","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-switch-on.html","searchKeys":["bindToSwitchOn","fun LiveData<Boolean>.bindToSwitchOn(switch: <ERROR CLASS>)"]},{"name":"fun LiveData<Boolean>.bindToViewBackgroundColor(view: <ERROR CLASS>, trueColor: <ERROR CLASS>, falseColor: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindToViewBackgroundColor","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-view-background-color.html","searchKeys":["bindToViewBackgroundColor","fun LiveData<Boolean>.bindToViewBackgroundColor(view: <ERROR CLASS>, trueColor: <ERROR CLASS>, falseColor: <ERROR CLASS>)"]},{"name":"fun LiveData<Boolean>.bindToViewEnabled(lifecycleOwner: LifecycleOwner, view: View)","description":"dev.icerock.moko.mvvm.livedata.bindToViewEnabled","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-view-enabled.html","searchKeys":["bindToViewEnabled","fun LiveData<Boolean>.bindToViewEnabled(lifecycleOwner: LifecycleOwner, view: View)"]},{"name":"fun LiveData<Boolean>.bindToViewHidden(view: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindToViewHidden","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-view-hidden.html","searchKeys":["bindToViewHidden","fun LiveData<Boolean>.bindToViewHidden(view: <ERROR CLASS>)"]},{"name":"fun LiveData<Boolean>.bindToViewVisibleOrGone(lifecycleOwner: LifecycleOwner, view: View)","description":"dev.icerock.moko.mvvm.livedata.bindToViewVisibleOrGone","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-view-visible-or-gone.html","searchKeys":["bindToViewVisibleOrGone","fun LiveData<Boolean>.bindToViewVisibleOrGone(lifecycleOwner: LifecycleOwner, view: View)"]},{"name":"fun LiveData<Boolean>.bindToViewVisibleOrInvisible(lifecycleOwner: LifecycleOwner, view: View)","description":"dev.icerock.moko.mvvm.livedata.bindToViewVisibleOrInvisible","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-to-view-visible-or-invisible.html","searchKeys":["bindToViewVisibleOrInvisible","fun LiveData<Boolean>.bindToViewVisibleOrInvisible(lifecycleOwner: LifecycleOwner, view: View)"]},{"name":"fun MutableLiveData<Boolean>.bindTwoWayToCheckBoxChecked(lifecycleOwner: LifecycleOwner, checkBox: CheckBox)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToCheckBoxChecked","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-check-box-checked.html","searchKeys":["bindTwoWayToCheckBoxChecked","fun MutableLiveData<Boolean>.bindTwoWayToCheckBoxChecked(lifecycleOwner: LifecycleOwner, checkBox: CheckBox)"]},{"name":"fun MutableLiveData<Boolean>.bindTwoWayToControlFocus(control: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToControlFocus","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-control-focus.html","searchKeys":["bindTwoWayToControlFocus","fun MutableLiveData<Boolean>.bindTwoWayToControlFocus(control: <ERROR CLASS>)"]},{"name":"fun MutableLiveData<String>.bindTwoWayToEditTextText(lifecycleOwner: LifecycleOwner, editText: EditText)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToEditTextText","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-edit-text-text.html","searchKeys":["bindTwoWayToEditTextText","fun MutableLiveData<String>.bindTwoWayToEditTextText(lifecycleOwner: LifecycleOwner, editText: EditText)"]},{"name":"fun MutableLiveData<Boolean>.bindTwoWayToSwitchOn(switch: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToSwitchOn","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-switch-on.html","searchKeys":["bindTwoWayToSwitchOn","fun MutableLiveData<Boolean>.bindTwoWayToSwitchOn(switch: <ERROR CLASS>)"]},{"name":"fun MutableLiveData<String>.bindTwoWayToTextFieldText(textField: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToTextFieldText","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-text-field-text.html","searchKeys":["bindTwoWayToTextFieldText","fun MutableLiveData<String>.bindTwoWayToTextFieldText(textField: <ERROR CLASS>)"]},{"name":"fun MutableLiveData<Boolean>.bindTwoWayToTextViewFocus(textView: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToTextViewFocus","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-text-view-focus.html","searchKeys":["bindTwoWayToTextViewFocus","fun MutableLiveData<Boolean>.bindTwoWayToTextViewFocus(textView: <ERROR CLASS>)"]},{"name":"fun MutableLiveData<String>.bindTwoWayToTextViewText(textView: <ERROR CLASS>)","description":"dev.icerock.moko.mvvm.livedata.bindTwoWayToTextViewText","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/bind-two-way-to-text-view-text.html","searchKeys":["bindTwoWayToTextViewText","fun MutableLiveData<String>.bindTwoWayToTextViewText(textView: <ERROR CLASS>)"]},{"name":"fun <OT, I1T, I2T> MediatorLiveData<OT>.compose(firstInput: LiveData<I1T>, secondInput: LiveData<I2T>, function: (I1T, I2T) -> OT): MediatorLiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.compose","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/compose.html","searchKeys":["compose","fun <OT, I1T, I2T> MediatorLiveData<OT>.compose(firstInput: LiveData<I1T>, secondInput: LiveData<I2T>, function: (I1T, I2T) -> OT): MediatorLiveData<OT>"]},{"name":"fun <OT, IT, LD : LiveData<out IT>> MediatorLiveData<OT>.composition(liveDataList: List<LD>, function: (List<IT>) -> OT): MediatorLiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.composition","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/composition.html","searchKeys":["composition","fun <OT, IT, LD : LiveData<out IT>> MediatorLiveData<OT>.composition(liveDataList: List<LD>, function: (List<IT>) -> OT): MediatorLiveData<OT>"]},{"name":"fun <T> LiveData<T>.debounce(coroutineScope: CoroutineScope, timeInMillis: Long): LiveData<T>","description":"dev.icerock.moko.mvvm.livedata.debounce","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/debounce.html","searchKeys":["debounce","fun <T> LiveData<T>.debounce(coroutineScope: CoroutineScope, timeInMillis: Long): LiveData<T>"]},{"name":"fun <T> LiveData<T>.distinct(): LiveData<T>","description":"dev.icerock.moko.mvvm.livedata.distinct","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/distinct.html","searchKeys":["distinct","fun <T> LiveData<T>.distinct(): LiveData<T>"]},{"name":"fun <T, OT> LiveData<T>.flatMap(function: (T) -> LiveData<OT>): LiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.flatMap","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/flat-map.html","searchKeys":["flatMap","fun <T, OT> LiveData<T>.flatMap(function: (T) -> LiveData<OT>): LiveData<OT>"]},{"name":"fun <T, OT> LiveData<T>.flatMapBuffered(function: (T, T) -> LiveData<OT>): LiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.flatMapBuffered","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/flat-map-buffered.html","searchKeys":["flatMapBuffered","fun <T, OT> LiveData<T>.flatMapBuffered(function: (T, T) -> LiveData<OT>): LiveData<OT>"]},{"name":"fun <T, OT> LiveData<T>.map(function: (T) -> OT): LiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.map","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/map.html","searchKeys":["map","fun <T, OT> LiveData<T>.map(function: (T) -> OT): LiveData<OT>"]},{"name":"fun <T, OT> LiveData<T>.mapBuffered(function: (T, T) -> OT): LiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.mapBuffered","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/map-buffered.html","searchKeys":["mapBuffered","fun <T, OT> LiveData<T>.mapBuffered(function: (T, T) -> OT): LiveData<OT>"]},{"name":"fun <IT, OT> LiveData<IT?>.mapOrNull(function: (IT) -> OT): LiveData<OT?>","description":"dev.icerock.moko.mvvm.livedata.mapOrNull","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/map-or-null.html","searchKeys":["mapOrNull","fun <IT, OT> LiveData<IT?>.mapOrNull(function: (IT) -> OT): LiveData<OT?>"]},{"name":"fun <OT> LiveData<Boolean?>.mapTrueOrNull(function: () -> OT): LiveData<OT?>","description":"dev.icerock.moko.mvvm.livedata.mapTrueOrNull","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/map-true-or-null.html","searchKeys":["mapTrueOrNull","fun <OT> LiveData<Boolean?>.mapTrueOrNull(function: () -> OT): LiveData<OT?>"]},{"name":"fun <OT, IT, LD : LiveData<out IT>> List<LD>.mediator(function: (List<IT>) -> OT): LiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.mediator","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/mediator.html","searchKeys":["mediator","fun <OT, IT, LD : LiveData<out IT>> List<LD>.mediator(function: (List<IT>) -> OT): LiveData<OT>"]},{"name":"fun <OT, I1T, I2T> LiveData<I1T>.mergeWith(secondLiveData: LiveData<I2T>, function: (I1T, I2T) -> OT): MediatorLiveData<OT>","description":"dev.icerock.moko.mvvm.livedata.mergeWith","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/merge-with.html","searchKeys":["mergeWith","fun <OT, I1T, I2T> LiveData<I1T>.mergeWith(secondLiveData: LiveData<I2T>, function: (I1T, I2T) -> OT): MediatorLiveData<OT>"]},{"name":"fun LiveData<Boolean>.not(): LiveData<Boolean>","description":"dev.icerock.moko.mvvm.livedata.not","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/not.html","searchKeys":["not","fun LiveData<Boolean>.not(): LiveData<Boolean>"]},{"name":"fun <T> MutableLiveData<T>.readOnly(): LiveData<T>","description":"dev.icerock.moko.mvvm.livedata.readOnly","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/read-only.html","searchKeys":["readOnly","fun <T> MutableLiveData<T>.readOnly(): LiveData<T>"]},{"name":"fun <T> LiveData<T?>.required(initialValue: T): LiveData<T>","description":"dev.icerock.moko.mvvm.livedata.required","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/required.html","searchKeys":["required","fun <T> LiveData<T?>.required(initialValue: T): LiveData<T>"]},{"name":"fun LiveData<Boolean>.revert(): LiveData<Boolean>","description":"dev.icerock.moko.mvvm.livedata.revert","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/revert.html","searchKeys":["revert","fun LiveData<Boolean>.revert(): LiveData<Boolean>"]},{"name":"fun <T> MutableLiveData<T>.setValue(value: T, async: Boolean)","description":"dev.icerock.moko.mvvm.livedata.setValue","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/set-value.html","searchKeys":["setValue","fun <T> MutableLiveData<T>.setValue(value: T, async: Boolean)"]},{"name":"fun <T : Throwable> LiveData<T>.throwableMessage(mapper: (Throwable) -> String = { it.message.orEmpty() }): LiveData<String>","description":"dev.icerock.moko.mvvm.livedata.throwableMessage","location":"mvvm-livedata/dev.icerock.moko.mvvm.livedata/throwable-message.html","searchKeys":["throwableMessage","fun <T : Throwable> LiveData<T>.throwableMessage(mapper: (Throwable) -> String = { it.message.orEmpty() }): LiveData<String>"]},{"name":"fun <T> LiveData<T>.bindNotNull(lifecycleOwner: LifecycleOwner, observer: (T) -> Unit)","description":"dev.icerock.moko.mvvm.utils.bindNotNull","location":"mvvm-livedata/dev.icerock.moko.mvvm.utils/bind-not-null.html","searchKeys":["bindNotNull","fun <T> LiveData<T>.bindNotNull(lifecycleOwner: LifecycleOwner, observer: (T) -> Unit)"]}]
